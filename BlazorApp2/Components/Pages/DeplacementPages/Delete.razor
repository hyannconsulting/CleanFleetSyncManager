@page "/deplacements/delete"
@using Microsoft.EntityFrameworkCore
@using FleetSyncManager.Infrastrucure.Persistence.Entities
@inject IDbContextFactory<FleetSyncManager.Infrastrucure.Persistence.FleetSyncManagerDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Deplacement</h2>
    <hr />
    @if (deplacement is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">VehiculeId</dt>
            <dd class="col-sm-10">@deplacement.VehiculeId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ConducteurId</dt>
            <dd class="col-sm-10">@deplacement.ConducteurId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateDepart</dt>
            <dd class="col-sm-10">@deplacement.DateDepart</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateArrivee</dt>
            <dd class="col-sm-10">@deplacement.DateArrivee</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LieuDepart</dt>
            <dd class="col-sm-10">@deplacement.LieuDepart</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">LieuArrivee</dt>
            <dd class="col-sm-10">@deplacement.LieuArrivee</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Kilometrage</dt>
            <dd class="col-sm-10">@deplacement.Kilometrage</dd>
        </dl>
        <EditForm method="post" Model="deplacement" OnValidSubmit="DeleteDeplacement" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(deplacement is null)">Delete</button> |
            <a href="/deplacements">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Deplacement? deplacement;

    [SupplyParameterFromQuery]
    private int DeplacementId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        deplacement = await context.Deplacements.FirstOrDefaultAsync(m => m.DeplacementId == DeplacementId);

        if (deplacement is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDeplacement()
    {
        using var context = DbFactory.CreateDbContext();
        context.Deplacements.Remove(deplacement!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/deplacements");
    }
}

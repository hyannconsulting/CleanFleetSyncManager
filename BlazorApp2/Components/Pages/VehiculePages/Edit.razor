@page "/vehicules/edit"
@using Microsoft.EntityFrameworkCore
@using FleetSyncManager.Infrastrucure.Persistence.Entities
@inject IDbContextFactory<FleetSyncManager.Infrastrucure.Persistence.FleetSyncManagerDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Vehicule</h2>
<hr />
@if (Vehicule is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Vehicule" OnValidSubmit="UpdateVehicule" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Vehicule.VehiculeId" value="@Vehicule.VehiculeId" />
                <div class="mb-3">
                    <label for="marque" class="form-label">Marque:</label>
                    <InputText id="marque" @bind-Value="Vehicule.Marque" class="form-control" />
                    <ValidationMessage For="() => Vehicule.Marque" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="modele" class="form-label">Modele:</label>
                    <InputText id="modele" @bind-Value="Vehicule.Modele" class="form-control" />
                    <ValidationMessage For="() => Vehicule.Modele" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="annee" class="form-label">Annee:</label>
                    <InputNumber id="annee" @bind-Value="Vehicule.Annee" class="form-control" />
                    <ValidationMessage For="() => Vehicule.Annee" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="immatriculation" class="form-label">Immatriculation:</label>
                    <InputText id="immatriculation" @bind-Value="Vehicule.Immatriculation" class="form-control" />
                    <ValidationMessage For="() => Vehicule.Immatriculation" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateachat" class="form-label">DateAchat:</label>
                    <InputDate id="dateachat" @bind-Value="Vehicule.DateAchat" class="form-control" />
                    <ValidationMessage For="() => Vehicule.DateAchat" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="statut" class="form-label">Statut:</label>
                    <InputText id="statut" @bind-Value="Vehicule.Statut" class="form-control" />
                    <ValidationMessage For="() => Vehicule.Statut" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/vehicules">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int VehiculeId { get; set; }

    [SupplyParameterFromForm]
    private Vehicule? Vehicule { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Vehicule ??= await context.Vehicules.FirstOrDefaultAsync(m => m.VehiculeId == VehiculeId);

        if (Vehicule is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateVehicule()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Vehicule!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!VehiculeExists(Vehicule!.VehiculeId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/vehicules");
    }

    private bool VehiculeExists(int vehiculeid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Vehicules.Any(e => e.VehiculeId == vehiculeid);
    }
}
